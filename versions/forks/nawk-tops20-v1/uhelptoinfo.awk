# -*-awk-*-
# <BEEBE.EMACS>UHELPTOINFO.AWK.4, 24-Jan-87 13:49:07, Edit by BEEBE
#
# Adopted from TOPS-20 EMACS TECO  M-X UHELP to INFO Conversion  written
# by Nelson H.F. Beebe (BEEBE@UTAH-SCIENCE)
#
# Convert the file from UHELP format to INFO format on stdout:
#
#         awk -f ULPtoINFO.awk foo.ulp >foo.info
#         itags foo.info
#
# The ITAGS program builds a special tag table at the end of the file to
# facilitate fast searching.
#
# A UHELP file consists of text blocks beginning with a least one  blank
# or tab (actually any character which  is a delimiter according to  the
# current syntax table will do), prefixed by a header line beginning  in
# column 1.  Trailing blanks are discarded from the output lines.
#
# For example, here is a sample UHELP file, uhelp.ulp
#
# This is prefix material which belongs in the Top menu node.
# FIRST
#  blah blah
# SECOND
#  blah blah
#  blah blah
# THIRD
#  blah blah
#  blah blah
#  blah blah
# FOURTH
#  This node has its own menu:
# * Menu:
#
# * TeX: (TEX)
# * DVI: (DVI)
# * FOO: (BEM:FOO)
# * NODE: (BEM:FOO)FIRST
#
# and here is the result of awk and itags processing:
#
# -*-Text-*-
# ***WARNING***:  Do NOT edit this file.  It was created automatically from
# the corresponding .ULP file
#        uhelp.ulp
# by the ULPtoINFO.awk program
# ^_^L
# File: uhelp, Node: FIRST, Previous: Top, Up: (CLSC), Next: SECOND
# FIRST
#  blah blah
# ^_^L
# File: uhelp, Node: SECOND, Previous: FIRST, Up: (CLSC), Next: THIRD
# SECOND
#  blah blah
#  blah blah
# ^_^L
# File: uhelp, Node: THIRD, Previous: SECOND, Up: (CLSC), Next: FOURTH
# THIRD
#  blah blah
#  blah blah
#  blah blah
# ^_^L
# File: uhelp, Node: FOURTH, Previous: THIRD, Up: (CLSC), Next: Top
# FOURTH
#  This node has its own menu:
# * Menu:
#
# * TeX: (TEX)
# * DVI: (DVI)
# * FOO: (BEM:FOO)
# * NODE: (BEM:FOO)FIRST
# ^_^L
# File: uhelp, Node: Top, Previous: FOURTH, Up: (CLSC), Next: FIRST
#  This is prefix material which belongs in the Top menu node.
#
# * Menu:
#
# * FIRST::
# * SECOND::
# * THIRD::
# * FOURTH::
# ^_^L
# Tag Table:
# File: uhelp, Node: FIRST^?190
# File: uhelp, Node: SECOND^?281
# File: uhelp, Node: THIRD^?385
# File: uhelp, Node: FOURTH^?503
# File: uhelp, Node: Top^?690
# ^_
# End Tag Table
#
# Although INFO files normally  have the menu node  at the top, this  is
# inconvenient for one-pass  processing, so  we collect  menu items  and
# output them after the last node, just before the tag table.  Thanks to
# the wonders of awk, this is quite a simple program.  The basic idea is
# to identify  node  header lines  and  output any  previous  node,  and
# otherwise to simply append the input line to the current body.
#
# The name  of the  command line  should be  a full  path  specification
# (either TOPS-20 or Unix), since it is desirable to record this in  the
# output so we know where the .INFO file came from.  It would be nice to
# get the current date/time  and the file date/time  too, but it is  not
# clear how to do this except on a Unix host.
#
# The tree structure established in the .INFO file also contains a ring,
# so that we have
#
#                         |--------Top--------|
#                         |                   |
#                         A--B--C--D--E--...--Z
#
# That is, the first subnode A has Top as its Previous, and the last, Z,
# has Top as  its Next.  This  is reasonable, and  avoids an INFO  error
# message "No next (previous) node"  if A and Z  are not so linked.   An
# alternative way would be  to link A  to Z, but  then the reader  could
# cycle indefinitely, instead of arriving back at the Top after a series
# of N (Next) commands.
#
# Any lines preceding the  first node header line  are prepended to  the
# Top menu node.  That is how introductory material gets into the  file.
# Nodes may also have their own  Menus; these have lines beginning  with
# an asterisk, which are considered part of the body.  For example
#
# NODENAME
#  blah blah blah
# * Menu:
# * item-1::			description
# * item-2: (infofile)		description
# NEXTNODENAME
#  blah blah blah
#
# [24-Jan-87]

BEGIN	{
	File = FILENAME;	# dev:<dir>name.ext OR /dir/dir/../name.ext

	k = index(File,":");
	if (k > 0)		# trim TOPS-20 device
	    File = substr(File,k+1,length(File)-k);

	k = index(File,">");
	if (k > 0)		# trim TOPS-20 directory
	    File = substr(File,k+1,length(File)-k);

	k = index(File,"/");
	while (k > 0)		# trim Unix path
	{
	    File = substr(File,k+1,length(File)-k);
	    k = index(File,"/");
	}

	k = index(File,".");
	if (k > 0) File = substr(File,1,k-1);	# trim extension

	MenuTag = "\n* Menu:\n\n";
	NodeTag = "\n";	# "\037\f\n" doesn't work, sigh...

	Body = "";		# text in node body
	FirstNode = "";
	Menu = MenuTag;
	Node = "Top";
	Up = "(CLSC)";		# Maybe (DIR) or (LOCAL) at your site

	print "-*-Text-*-"
	print "***WARNING***:  Do NOT edit this file.  It was created automatically from"
	print "the corresponding .ULP file"
	print "\t" FILENAME;
	print "by the ULPtoINFO.awk program"
	}
{

	Line = $0;
	len = k = length(Line);
	while ((k > 0) && (substr(Line,k,1) == " "))
	    k--;
	if (len > k)	# efficiency--don't copy blank-trimmed lines
	    Line = substr(Line,1,k);
	if ((length(Line) > 0) && (substr(Line,1,1) != " ") \
	    && (substr(Line,1,1) != "*"))	# new node
	{
		if (Body != "")
		{
			Next = Line;
			if (Node == "Top")# nameless top stuff is part of menu node
				Menu = Body Menu;
			else
				printf "%sFile: %s, Node: %s, Previous: %s, Up: %s, Next: %s\n%s",\
				    NodeTag, File, Node, Previous, Up, Next, Body;
		}
		Body = Line "\n";
		Previous = Node;
		Node = Line;
		if (FirstNode == "") FirstNode = Node;
		Menu = Menu "* " Line "::\n";
	}
	else
		Body = Body Line "\n";
}

END	{
	Next = "Top";			# last child points to parent
	printf "%sFile: %s, Node: %s, Previous: %s, Up: %s, Next: %s\n%s",\
	    NodeTag, File, Node, Previous, Up, Next, Body;

	Previous = Node;
	Next = FirstNode;
	Node = "Top";		# Menu node goes last
	printf "%sFile: %s, Node: %s, Previous: %s, Up: %s, Next: %s\n%s",\
	    NodeTag, File, Node, Previous, Up, Next, Menu;
	printf "%sTag Table:\n\nEnd Tag Table\n",NodeTag;
	}
